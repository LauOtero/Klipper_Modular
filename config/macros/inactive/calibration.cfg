######################################################################
#                               CALIBRATION
######################################################################
#   SMART_HOME
#   GENERATE_SHAPER_GRAPHS
#   SENSORLESS_HOME_X 
#   SENSORLESS_HOME_Y 
#   G29
#   PID_EXTRUDER 
#   PID_BED 
#   PID_ALL
#   G34
#   G35
#   SENSOR_CALIBRATE
#   M900
#   BLTOUCH_RESET
#   BLTOUCH_TEST
#   TEST_ACCURACY
######################################################################

[gcode_macro SMART_HOME]
description: Hace un home de los ejes solo cuando es necesario
gcode:
    #{action_respond_info(printer.toolhead.homed_axes)}
    {% if printer.toolhead.homed_axes == "" %}
        G28
    {% elif printer.toolhead.homed_axes == "x" %}
        G28 Y Z
    {% elif printer.toolhead.homed_axes == "y" %}
        G28 X Z
    {% elif printer.toolhead.homed_axes == "xy" %}
        G28 Z
    {% endif %}

[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genera los graficos de resonancia del Input Shaper para su analisis. Uso: Ambos ejes sin parametros, un eje (GENERATE_SHAPER_GRAPHS AXIS = X)
gcode:
    {% if params.AXIS is defined %}
        {% if params.AXIS|lower == 'x' %}
            SMART_HOME
            TEST_RESONANCES AXIS=X
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
            NOTIFY TXT="Se ha generado el grafico del Input Shaper para el eje X.¡Puedes consultarlo en la carpeta Input_Shaper en la opcion Maquina!"
        {% elif params.AXIS|lower == 'y' %}
            SMART_HOME
            TEST_RESONANCES AXIS=Y
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
            RESPOND MSG="Se ha generado el grafico del Input Shaper para el eje Y.¡Puedes consultarlo en la carpeta Input_Shaper en la opcion Maquina!"
        {% else %}
            {action_raise_error("Eje desconocido. Se espera X o Y.")}
        {% endif %}
    {% else %}
        SMART_HOME
        TEST_RESONANCES AXIS=X
        TEST_RESONANCES AXIS=Y
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
        NOTIFY TXT="Se ha generado el grafico del Input Shaper para ambos ejes.¡Puedes consultarlo en la carpeta Input_Shaper en la opcion Maquina!"
    {% endif %}


[gcode_macro SENSORLESS_HOME_X]
description: Home X con sensorless
gcode:

    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={vg.home_cur} HOLDCURRENT={vg.home_cur}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    #move z 10 down
    G1 Z10 F600
    # Home
    G28 X
    # Move away
    G90
    G1 X{vg.x_center} F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
	
[gcode_macro SENSORLESS_HOME_Y]
description: Home Y con sensorless
gcode:
    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={vg.home_cur} HOLDCURRENT={vg.home_cur}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    #move z 10 down
    G1 Z10 F600
    # Home
    G28 Y
    # Move away
    G90
    G1 Y{vg.y_center} F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
    
[gcode_macro G29]
description: Realiza la malla de medicion de la cama
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        NOTIFY TEXT="G29 no se puede utilizar imprimiendo."
    {% else %}
        BED_MESH_CLEAR
        SMART_HOME
        G28 Z
        BED_MESH_CALIBRATE
        BED_MESH_PROFILE SAVE={printer.heater_bed.target}
    {% endif %}
 
[gcode_macro PID_EXTRUDER]
description: Calibra la temperatura del extrusor.
gcode:
    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set T = params.T|default(vg.temp_pid_e)|int %}
	PID_CALIBRATE HEATER=extruder TARGET={T}
	SAVE_CONFIG

[gcode_macro PID_BED]
description: Calibra la temperatura de la cama.
gcode:
    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set T = params.T|default(vg.temp_pid_b)|int %}
	PID_CALIBRATE HEATER=heater_bed TARGET={T}
	SAVE_CONFIG

[gcode_macro PID_ALL]
description: Calibra la temperatura del extrusor y la cama.
gcode:
    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set TE = params.TE|default(vg.temp_pid_e)|int %}
    {% set TB = params.TB|default(vg.temp_pid_b)|int %}
	PID_CALIBRATE HEATER=extruder TARGET={TE}
	PID_CALIBRATE HEATER=heater_bed TARGET={TB}
	SAVE_CONFIG
  
[gcode_macro G34]
description: Calibra el eje X
gcode:
    {% set vg = printer["gcode_macro VAR_GLOBALS"] %}
    {% set ZTILT = params.ZTILT|default(0)|int %}

    SMART_HOME
    {% if ZTILT == 1 %}
        Z_TILT_ADJUST
        Z_TILT_ADJUST
    {% endif %}
    G28 XY
    G0 X{vg.x_center} Y{vg.y_center} Z{vg.z_up} F6000

[gcode_macro G35]
gcode:
    SMART_HOME
    SCREWS_TILT_CALCULATE
     
[gcode_macro SENSOR_CALIBRATE]
gcode:
    SMART_HOME
    PROBE_CALIBRATE

[gcode_macro M900]
gcode:
    {% set K = params.K|default(0.0)|float %}
    SET_PRESSURE_ADVANCE ADVANCE={K}


[gcode_macro BLTOUCH_RESET]
description: Resetea el bl-touch 
gcode:
    NOTIFY TEXT="BLTOUCH RESET..."
	BLTOUCH_DEBUG COMMAND=reset

[gcode_macro BLTOUCH_TEST]
description: Test de movimiento del pitorro del bl-touch
gcode:
    NOTIFY TEXT="BLTOUCH TEST..."
	BLTOUCH_DEBUG COMMAND=pin_down
	BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro TEST_ACCURACY]
description: Test de precisión del bl-touch
gcode:
    NOTIFY TEXT="PROBE ACCURACY..."
    SMART_HOME
    PROBE_ACCURACY

[gcode_macro ACELEROMETRO_TEST]
gcode:
    NOTIFY TEXT="TEST ACELEROMETRO..."
    ACCELEROMETER_QUERY

[gcode_macro GET_PINDA_TEMP]
gcode:
    GET_PROBE_TEMP
