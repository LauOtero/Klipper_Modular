######################################################################
#                               PRINTING
######################################################################
#   _VAR_GLOBALS
#   START_PRINT
#   PRIME_LINE
#   END_PRINT
#   MOVE_PARK
#   PAUSE
#   RESUME
#   CANCEL_PRINT
#   LOW_TEMP_CHECK
######################################################################

[save_variables]
filename: ~/klipper_config/variables/save_variables.dat

[delayed_gcode activate_var_globals]
initial_duration: 1
gcode:
    _VAR_GLOBALS ; Se cargan las variables globales al iniciar klipper.

[gcode_macro _VAR_GLOBALS]

# Temperaturas de impresion
variable_temp_extruder          :   225.0   # temperatura de impresion 
variable_temp_bed               :   55.0    # temperatura de cama
variable_temp_chamber           :   60.0    # temperatura de cabina
variable_temp_extruder_pause    :   0       # temperatura de impresion antes de la pausa
variable_temp_keep              :   true   # mantiene la temperatura cuando esta la impresion en pausa

# Motores
variable_home_cur               :   0.700   # Vref mAh

# Bandeja Electronica
variable_status_et              :   false   # Bandeja de electronica Abierta/Cerrada (True|False)

# Posición de parking
variable_calc_parking           :   True    # habilita/deshabilita el pariking calculado (false = se desplaaza a las coordenadas proporcionadas abajo)
variable_x_park	                :   100.0   # Posicion de X en parking
variable_y_park                 :   100.0   # Posicion de X en parking
variable_z_park                 :   100.0   # Posicion mínimal de Z en parking

# Pids por defecto
variable_temp_pid_e             :   230.0   # temperatura del extrusor para realizar el PID
variable_temp_pid_b             :   60.0    # temperatura de la cama para realizar el PID
variable_default_bedtemp        :   30.0    # temperatura mínima por defecto al calibrar la cama

variable_z_up                   :   10.0    # sube x milimetros al hacer desplazamientos(home)

# posicion central 
variable_calc_center_pos        :   True    # calcula el centro de la cama (false = se desplaaza a las coordenadas proporcionadas abajo)
variable_x_center               :   0.0     # posicion central de X
variable_y_center               :   0.0     # posicion central de Y

variable_beeps                  :   2       # Numero de beeps de aviso.

variable_retract_length	        :   0.5     # milimetros de retraccion de filamento
variable_retract_speed          :   30      # velocidad de retraccion

# filamento 
variable_fil_length_purge       :   5       # longitud de purga de filamento en milamentos
variable_fil_purge_speed        :   450     # velocidad de retracción de purga de filamento
variable_fil_num_repeats        :   1       # repite un numero de veces la carga/descargar evitar restriccion
variable_fil_length             :   50      # logitud de filamento a cargar/descargar 
variable_fil_speed              :   300     # velocidad de carga/descarga filamento
variable_fil_fast_speed         :   1200    # velocidad de carga/descarga filamento

variable_timeout_pause          :   7200    # tiempo de espera para entrar en reposo. (1h)
variable_timeout                :   3600    # tiempo de espera para entrar en reposo. (30 min)
gcode:

    {% if calc_center_pos %}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=x_center VALUE={(printer.toolhead.axis_maximum.x / 2)}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=y_center VALUE={(printer.toolhead.axis_maximum.y / 2)}
    {% endif %}

    {% if calc_parking %}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=x_park VALUE={(printer.toolhead.axis_maximum.x - 5)}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=y_park VALUE={(printer.toolhead.axis_maximum.y - 20)}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=z_park VALUE={(printer.toolhead.axis_maximum.z / 3)}
    {% endif %}

    # se actualizan los valores de retraccion a los del firmware
    {% if printer['firmware_retraction'] %}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=retract_length VALUE={printer.firmware_retraction.retract_length}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=retract_speed VALUE={printer.firmware_retraction.retract_speed}
    {% endif %}

    ECHO_VAR_GLOBALS

[gcode_macro ECHO_VAR_GLOBALS]
description: Echo _VAR_GLOBALS variables to the console.
gcode:
  {% for var, value in printer["gcode_macro _VAR_GLOBALS"].items() %}
      {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[gcode_macro MOVE_UP]
gcode:
  SAVE_GCODE_STATE NAME=my_move_up_state
  G91
  G1 Z150 F1200
  G4 P3000
  RESTORE_GCODE_STATE NAME=my_move_up_state MOVE=1

[gcode_macro START_PRINT]
description: Uso: PRINT_START TEMP_EXTRUDER=<[TempI] | [Temp1C , TempI]> TEMP_BED=<[TempI] | [Temp1C , TempI]>\n Opcionales\n Temp Cabina TEMP_CHAMBER=[TempCab]\n mallado inteligente PRINT_MIN=[MINX,MINY] PRINT_MAX=[MAXX,MAXY]
gcode:

    {% if params.TEMP_EXTRUDER and params.TEMP_BED %}

        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}   ; se accede las variables globales

        # El parametro TEMP_EXTRUDER se puede utilizar con un valor como con dos valores separados por una coma y entre []
        # TEMP_EXTRUDER=250  (unico valor para ambas variables(temperatura primera capa e impresion))
        # TEMP_EXTRUDER=260, 250 (cada variable tiene su valor(temperatura primera capa e impresion))

        {% if ',' in params.TEMP_EXTRUDER %}
        # Los valores corresponden a temperatura de la primera capa e impresion.
            {% set t_fl_extruder = params.TEMP_EXTRUDER.split(",")[0]|float %}  ; Temperatura Primera capa EXTRUSOR
            {% set t_extruder = params.TEMP_EXTRUDER.split(",")[1]|float %}     ; Temperatura EXTRUSOR
        {% else %}
        # Si solo se asigna un valor es el mismo para ambas variables.
            {% set t_fl_extruder = params.TEMP_EXTRUDER|float %}                ; Temperatura Primera capa EXTRUSOR
            {% set t_extruder = t_fl_extruder %}                                ; Temperatura EXTRUSOR        
        {% endif %}
        
        # El parametro TEMP_BED se puede utilizar con un valor como con dos valores separados por una coma y entre [],
        # TEMP_BED=100  (unico valor para ambas variables(temperatura primera capa cama e impresion cama))
        # TEMP_BED=110, 100 (cada variable tiene su valor(temperatura primera capa cam e impresion cama))
        
        {% if ',' in params.TEMP_BED %}
        # Los valores corresponden a temperatura de la primera capa e impresion.
            {% set t_fl_bed = params.TEMP_BED.split(",")[0]|float %}    ; Temperatura Primera capa CAMA
            {% set t_bed = params.TEMP_BED.split(",")[1]|float %}       ; Temperatura CAMA
        {% else %}
        # Si solo se asigna un valor es el mismo para ambas variables.
            {% set t_fl_bed = params.TEMP_BED|float %}                  ; Temperatura Primera capa EXTRUSOR
            {% set t_bed = t_fl_bed %}                                  ; Temperatura EXTRUSOR        
        {% endif %}


        {% set t_chamber = params.TEMP_CHAMBER|float %}                 ; Temperatura CABINA

        # 
        # Se almacen las temperaturas de impresion en las variables globales
        # 
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=temp_extruder VALUE={t_extruder}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=temp_bed VALUE={t_bed}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=temp_chamber VALUE={t_chamber}

        # Temperaturas de inicio de calentamiento
        M104 S{t_fl_extruder}   ; asigna la temperatura del extrusor
        M140 S{t_fl_bed}        ; asigna la temperatura de la cama
        {% if t_chamber != 0 and printer["gcode_macro M141"] is defined %}
            M141 S={t_chamber}  ; asigna la temperatura de la cabina
        {% endif %}

        # Temperaturas objetivo 
        M190 S{t_fl_bed}        ; espera hasta alcanzar la temperatura de la cama
        M109 S{t_fl_extruder}   ; espera hasta alcanzar la temperatura del extrusor
        {% if t_chamber != 0 and printer["gcode_macro M191"] is defined %}
            M191 S={t_chamber}  ; espera hasta alcanzar la temperatura de cabina.
        {% endif %}
        
        # Calibrado de cama por zona de impresion inteligente
        {% if printer.configfile.config["bltouch"] is defined or printer.configfile.config["probe"] is defined  %}
            {% if params.PRINT_MIN and params.PRINT_MAX and printer["gcode_macro BED_MESH_CALIBRATE"] is defined %}
                NOTIFY TEXT=Calibrado de cama inteligente...
                BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=1 # calibrado inteligente
                BED_MESH_PROFILE LOAD=default # Load stored bed mesh
            {% else %}
                NOTIFY TEXT=Calibrado de cama normal...
                G29
                BED_MESH_PROFILE LOAD={printer.heater_bed.target} # Load stored bed mesh
            {% endif %}
        {% endif %}

        # Use absolute coordinates
        G90
        # Move the nozzle near the be
        G1 X0 Y0 Z5 F6000
        # Prime line
        PRIME_LINE
    
    {% endif %}

# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode:
      #Get Printer built volume dimensions
      {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
      {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
      {% set Z_MAX = printer.toolhead.axis_maximum.z|default(100)|float %}

      #Get Nozzle diameter and filament width for conditioning
      {% set NOZZLE = printer.extruder.nozzle_diameter|default(0.4)|float %}
      {% set FILADIA = printer.extruder.filament_diameter|default(1.75)|float %}

      #Set Start coordinates of priming lines
      {% set X_START = 10.0|default(10.0)|float %}
      {% set Y_START = 20.0|default(20.0)|float %}

      #Calculate Primer line extrusion volume and filament length
      {% set PRIMER_WIDTH = 0.75 * NOZZLE %}                    
      {% set PRIMER_HEIGHT = 0.70 * NOZZLE %}           
      {% set PRIMER_SECT = PRIMER_WIDTH * PRIMER_HEIGHT %}    
      {% set PRIMER_VOL = PRIMER_SECT * (X_MAX - 3 * X_START) %}    
      {% set FILA_SECT = 3.1415 * ( FILADIA / 2.0)**2 %}          
      {% set FILA_LENGTH = 1.55 * PRIMER_VOL / FILA_SECT %}      

      #Precondition extruder
      G92 E0     
      G1 X{X_START} Y{Y_START} Z{PRIMER_HEIGHT} F6000.0     
      G1 X{X_MAX - 2 * X_START} Y{Y_START} Z{PRIMER_HEIGHT} E{FILA_LENGTH} F2000.0 
      G1 X{X_MAX - 2 * X_START} Y{Y_START + PRIMER_WIDTH} Z{PRIMER_HEIGHT} E{FILA_LENGTH}
      G1 X{X_START} Y{Y_START + PRIMER_WIDTH} Z{PRIMER_HEIGHT} E{FILA_LENGTH} F2000.0 
      G92 E0            
      G1 Z2.0 F600        
      G1 Z0.2 F600        
      G1 Z2.0 F600
    
[gcode_macro END_PRINT]
description: Finaliza la impresion.
gcode:
    {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
   
    G91
    G1 E-{vg.retract_length} F2100 # retrae el filamento
    G1 Z{vg.z_up}           # sube Z
    #G1 Z{ZU}
    PRESENT_PRINT           # aparca el cabezal de imprsion
    TURN_OFF_HEATERS        # desactiva extrusor y cama
    M106 S0                 # apaga los ventiladores
    M84                     # desactiva motores
    NOTIFY TEXT="Impresion finalizada :)"

[gcode_macro PRESENT_PRINT]
description: Desplaza la cama hacía adelante para presentar la impresión.\n USO: PRESENT_PRINT [VELOCITY=2000]
gcode:  

  # Parametros
  {% set VELOCITY = params.VELOCITY|default(1500)|float %} ; velocidad de desplazamiento del eje X e Y al finalizar
 
  # constantes de movimiento
  {% set Y_HOME = printer.configfile.config["stepper_y"]["position_max"] %}   ; posiciona el cabezal en position_max
  {% set X_HOME = printer.configfile.config["stepper_x"]["position_max"] %}   ; posiciona el cabezal en position_max
  
  ; desplaza la cama hacia adelante solo si la cinematica lo permite.
  {% if printer.configfile.config["printer"]["kinematics"]|lower in ['cartesian' , 'deltesian' , 'corexz'] %}
    G1 X{X_HOME} Y{Y_HOME} F{VELOCITY} ;  Presenta la impresion desplazando la cama hacia adelante y aparcando el cabezal.
    G1 Z{printer.toolhead.position.z + 10} F{VELOCITY/2}
  {% endif %}

[gcode_macro MOVE_PARK]
description: Aparca el cabezal de impresion.
gcode:
    {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
   
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set pos_z = printer.toolhead.position.z|float %}

    {% if pos_z < vg.z_park %}
        {% set z_safe = (vg.z_park - pos_z) %}
    {% elif pos_z < (max_z - vg.z_up) %}
        {% set z_safe = globals.z_park %}
    {% else %}
        {% set z_safe = max_z - pos_z %}
    {% endif %}

    ##### end of definitions #####
    NOTIFY TEXT="Aparcando cabezal de impresion"

    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{vg.retract_length} F2100
    {% else %}
        NOTIFY TEXT="Temperatura baja, imposible retraer"
    {% endif %}
    
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F3000
        G90
        G1 X{vg.x_park} Y{vg.y_park} F6000
    {% else %}
        NOTIFY TEXT="Ejes no inicializados."
    {% endif %}

[gcode_macro PAUSE]
description: Pausa la impresion actual.
rename_existing: BASE_PAUSE
gcode:
   {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
  
   {% if not printer.pause_resume.is_paused %}
      SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=temp_extruder_pause VALUE={printer.extruder0.target}
      M400
      SAVE_GCODE_STATE NAME=PAUSE_state
      BASE_PAUSE
      BEEP
      MOVE_PARK
      BEEP R={vg.beeps}
   {% endif %}

[gcode_macro RESUME]
description: Reanuda la impresion actual.
rename_existing: BASE_RESUME
gcode:

    {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
	
    #### Definiendo el parametro VELOCITY  ####
    {% if 'VELOCITY' in params|upper %}
		{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
		{% set get_params = "" %}
    {% endif %}
	
    NOTIFY TEXT="Reanudando..." CLEAR=1
    MSG_RESUME
    SMART_HOME
    LOW_TEMP_CHECK
    G91
    G1 E{vg.retract} F2100
    BASE_RESUME {get_params}	
	

[gcode_macro RESUME]
description: Reanuda la impresion actual.
rename_existing: BASE_RESUME
gcode: 
    {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}

    {% if not printer.pause_resume.is_paused %}
        NOTIFY TEXT="Impresion no pausada, reanudacion de impresion abortado"
    {% else %}
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        # Calienta extrusor y cama si es necesario
        M190 S{vg.temp_bed} ; wait for bed temp
        M109 S{vg.temp_extruder} ; wait for extruder temp
        G4 P200
        LOW_TEMP_CHECK
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=80
        BASE_RESUME
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancela la impresion actual
rename_existing: BASE_CANCEL_PRINT
gcode:
    NOTIFY TEXT="CANCEL PRINTING..." CLEAR=1
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    MOVE_PARK
    BASE_CANCEL_PRINT